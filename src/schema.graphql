### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  teacher: Teacher!
  token: String!
}

type Classroom {
  academicLevel: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  school: School!
  studentsClassYears(after: String, before: String, first: Int, last: Int, skip: Int): [StudentClassYear!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
  updatedAt: DateTime!
  year: String!
}

input ClassroomCreateInput {
  academicLevel: String!
  id: ID
  name: String!
  school: SchoolCreateOneWithoutSchoolInput!
  studentsClassYears: StudentClassYearCreateManyWithoutStudentsClassYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  year: String!
}

input ClassroomCreateManyWithoutClassroomsInput {
  connect: [ClassroomWhereUniqueInput!]
  create: [ClassroomCreateWithoutTeachersInput!]
}

input ClassroomCreateOneWithoutClassroomInput {
  connect: ClassroomWhereUniqueInput
  create: ClassroomCreateWithoutStudentsClassYearsInput
}

input ClassroomCreateWithoutStudentsClassYearsInput {
  academicLevel: String!
  id: ID
  name: String!
  school: SchoolCreateOneWithoutSchoolInput!
  teachers: TeacherCreateManyWithoutTeachersInput
  year: String!
}

input ClassroomCreateWithoutTeachersInput {
  academicLevel: String!
  id: ID
  name: String!
  school: SchoolCreateOneWithoutSchoolInput!
  studentsClassYears: StudentClassYearCreateManyWithoutStudentsClassYearsInput
  year: String!
}

input ClassroomUpdateInput {
  academicLevel: String
  name: String
  teachers: [TeacherWhereUniqueInput!]
}

input ClassroomWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Mutation {
  createOneClassroom(data: ClassroomCreateInput!): Classroom!
  createOneSchool(data: SchoolCreateInput!): School!
  createOneTeacher(avatar: String, email: String, firstName: String, lastName: String, password: String, role: Role, school: SchoolWhereUniqueInput, username: String): AuthPayload!
  deleteOneClassroom(where: ClassroomWhereUniqueInput): Classroom!
  deleteOneTeacher(where: TeacherWhereUniqueInput): Teacher!
  login(password: String, teacher: TeacherWhereUniqueInput): AuthPayload!
  updateOneClassroom(data: ClassroomUpdateInput, where: ClassroomWhereUniqueInput): Classroom!
  updateOneTeacher(data: UpdateOneTeacherInput, where: TeacherWhereUniqueInput): Teacher!
}

type PPRE {
  checkups(after: String, before: String, first: Int, last: Int, skip: Int): [PPRECheckup!]
  createdAt: DateTime!
  globalAssessment: String
  id: ID!
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  skillsConcerned(after: String, before: String, first: Int, last: Int, skip: Int): [Skill!]
  skillsToWork(after: String, before: String, first: Int, last: Int, skip: Int): [Skill!]
  studentsClassYear: StudentClassYear!
  updatedAt: DateTime!
}

type PPRECheckup {
  assessment: String!
  id: ID!
  phase: Int!
  ppre: PPRE!
  skillWorked(after: String, before: String, first: Int, last: Int, skip: Int): [Skill!]
}

input PPRECheckupCreateManyWithoutCheckupsInput {
  connect: [PPRECheckupWhereUniqueInput!]
  create: [PPRECheckupCreateWithoutPpreInput!]
}

input PPRECheckupCreateOneWithoutPPRECheckupInput {
  connect: PPRECheckupWhereUniqueInput
  create: PPRECheckupCreateWithoutSkillWorkedInput
}

input PPRECheckupCreateWithoutPpreInput {
  assessment: String!
  id: ID
  phase: Int!
  skillWorked: SkillCreateManyWithoutSkillWorkedInput
}

input PPRECheckupCreateWithoutSkillWorkedInput {
  assessment: String!
  id: ID
  phase: Int!
  ppre: PPRECreateOneWithoutPpreInput!
}

input PPRECheckupWhereUniqueInput {
  id: ID
}

input PPRECreateOneWithoutPpreInput {
  connect: PPREWhereUniqueInput
  create: PPRECreateWithoutStudentsClassYearInput
}

input PPRECreateOneWithoutSkillsConcernedPPREInput {
  connect: PPREWhereUniqueInput
  create: PPRECreateWithoutSkillsConcernedInput
}

input PPRECreateOneWithoutSkillsToWorkPPREInput {
  connect: PPREWhereUniqueInput
  create: PPRECreateWithoutSkillsToWorkInput
}

input PPRECreateWithoutSkillsConcernedInput {
  checkups: PPRECheckupCreateManyWithoutCheckupsInput
  globalAssessment: String
  id: ID
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
  studentsClassYear: StudentClassYearCreateOneWithoutStudentsClassYearInput!
}

input PPRECreateWithoutSkillsToWorkInput {
  checkups: PPRECheckupCreateManyWithoutCheckupsInput
  globalAssessment: String
  id: ID
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  studentsClassYear: StudentClassYearCreateOneWithoutStudentsClassYearInput!
}

input PPRECreateWithoutStudentsClassYearInput {
  checkups: PPRECheckupCreateManyWithoutCheckupsInput
  globalAssessment: String
  id: ID
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
}

enum PPRENature {
  REMEDIATION
  SUPPORT
  UPGRADE
}

input PPREWhereUniqueInput {
  id: ID
}

type Query {
  findManyClassroom(after: String, before: String, first: Int, last: Int, skip: Int): [Classroom!]
  findManySchool(after: String, before: String, first: Int, last: Int, skip: Int): [School!]
  findManyTeacher(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
  findOneSchool(where: SchoolWhereUniqueInput!): School
  findOneTeacher(where: TeacherWhereUniqueInput!): Teacher
}

enum Role {
  ADMIN
  DEFAULT
  MANAGER
}

type School {
  classrooms(after: String, before: String, first: Int, last: Int, skip: Int): [Classroom!]
  createdAt: DateTime!
  id: ID!
  name: String!
  phone: String!
  skills(after: String, before: String, first: Int, last: Int, skip: Int): [Skill!]
  studentsClassYears(after: String, before: String, first: Int, last: Int, skip: Int): [StudentClassYear!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
  updatedAt: DateTime!
  webstite: String
}

enum SchoolAttendance {
  ALWAYS
  FREQUENTDELAYS
  LONGABSENCES
  SHORTFREQUENTABSENCES
}

input SchoolCreateInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  id: ID
  name: String!
  phone: String!
  skills: SkillCreateManyWithoutSkillsInput
  studentsClassYears: StudentClassYearCreateManyWithoutStudentsClassYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  webstite: String
}

input SchoolCreateOneWithoutSchoolInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutClassroomsInput
}

input SchoolCreateWithoutClassroomsInput {
  id: ID
  name: String!
  phone: String!
  skills: SkillCreateManyWithoutSkillsInput
  studentsClassYears: StudentClassYearCreateManyWithoutStudentsClassYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  webstite: String
}

input SchoolWhereUniqueInput {
  id: ID
}

type Skill {
  children: Skill
  id: ID!
  name: String!
  parent: Skill!
  school: School!
  skillsConcernedPPRE: PPRE!
  skillsToWorkPPRE: PPRE!
}

input SkillCreateManyWithoutSkillsConcernedInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsConcernedPPREInput!]
}

input SkillCreateManyWithoutSkillsInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSchoolInput!]
}

input SkillCreateManyWithoutSkillsToWorkInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsToWorkPPREInput!]
}

input SkillCreateManyWithoutSkillWorkedInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutPPRECheckupInput!]
}

input SkillCreateOneWithoutChildrenInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutParentInput
}

input SkillCreateOneWithoutParentInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutChildrenInput
}

input SkillCreateWithoutChildrenInput {
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput!
  pPRECheckup: PPRECheckupCreateOneWithoutPPRECheckupInput
  school: SchoolCreateOneWithoutSchoolInput!
  skillsConcernedPPRE: PPRECreateOneWithoutSkillsConcernedPPREInput!
  skillsToWorkPPRE: PPRECreateOneWithoutSkillsToWorkPPREInput!
}

input SkillCreateWithoutParentInput {
  children: SkillCreateOneWithoutChildrenInput
  id: ID
  name: String!
  pPRECheckup: PPRECheckupCreateOneWithoutPPRECheckupInput
  school: SchoolCreateOneWithoutSchoolInput!
  skillsConcernedPPRE: PPRECreateOneWithoutSkillsConcernedPPREInput!
  skillsToWorkPPRE: PPRECreateOneWithoutSkillsToWorkPPREInput!
}

input SkillCreateWithoutPPRECheckupInput {
  children: SkillCreateOneWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput!
  school: SchoolCreateOneWithoutSchoolInput!
  skillsConcernedPPRE: PPRECreateOneWithoutSkillsConcernedPPREInput!
  skillsToWorkPPRE: PPRECreateOneWithoutSkillsToWorkPPREInput!
}

input SkillCreateWithoutSchoolInput {
  children: SkillCreateOneWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput!
  pPRECheckup: PPRECheckupCreateOneWithoutPPRECheckupInput
  skillsConcernedPPRE: PPRECreateOneWithoutSkillsConcernedPPREInput!
  skillsToWorkPPRE: PPRECreateOneWithoutSkillsToWorkPPREInput!
}

input SkillCreateWithoutSkillsConcernedPPREInput {
  children: SkillCreateOneWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput!
  pPRECheckup: PPRECheckupCreateOneWithoutPPRECheckupInput
  school: SchoolCreateOneWithoutSchoolInput!
  skillsToWorkPPRE: PPRECreateOneWithoutSkillsToWorkPPREInput!
}

input SkillCreateWithoutSkillsToWorkPPREInput {
  children: SkillCreateOneWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput!
  pPRECheckup: PPRECheckupCreateOneWithoutPPRECheckupInput
  school: SchoolCreateOneWithoutSchoolInput!
  skillsConcernedPPRE: PPRECreateOneWithoutSkillsConcernedPPREInput!
}

input SkillWhereUniqueInput {
  id: ID
}

type Student {
  birthDate: DateTime!
  classYears(after: String, before: String, first: Int, last: Int, skip: Int): [StudentClassYear!]
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  password: String!
  username: String!
}

type StudentClassYear {
  classroom: Classroom!
  id: ID!
  ppre: PPRE
  school: School!
  student: Student!
  year: DateTime!
}

input StudentClassYearCreateManyWithoutStudentsClassYearsInput {
  connect: [StudentClassYearWhereUniqueInput!]
  create: [StudentClassYearCreateWithoutSchoolInput!]
}

input StudentClassYearCreateOneWithoutStudentsClassYearInput {
  connect: StudentClassYearWhereUniqueInput
  create: StudentClassYearCreateWithoutPpreInput
}

input StudentClassYearCreateWithoutPpreInput {
  classroom: ClassroomCreateOneWithoutClassroomInput!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  student: StudentCreateOneWithoutStudentInput!
  year: DateTime!
}

input StudentClassYearCreateWithoutSchoolInput {
  classroom: ClassroomCreateOneWithoutClassroomInput!
  id: ID
  ppre: PPRECreateOneWithoutPpreInput
  student: StudentCreateOneWithoutStudentInput!
  year: DateTime!
}

input StudentClassYearWhereUniqueInput {
  id: ID
}

input StudentCreateOneWithoutStudentInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutClassYearsInput
}

input StudentCreateWithoutClassYearsInput {
  birthDate: DateTime!
  firstName: String!
  gender: Gender!
  id: ID
  lastName: String!
  password: String!
  username: String!
}

input StudentWhereUniqueInput {
  id: ID
  username: String
}

type Teacher {
  avatar: String
  classrooms(after: String, before: String, first: Int, last: Int, skip: Int): [Classroom!]
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  role: Role!
  school: School!
  updatedAt: DateTime!
  username: String!
}

input TeacherCreateManyWithoutTeachersInput {
  connect: [TeacherWhereUniqueInput!]
  create: [TeacherCreateWithoutSchoolInput!]
}

input TeacherCreateWithoutSchoolInput {
  avatar: String
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  role: Role!
  username: String!
}

input TeacherWhereUniqueInput {
  email: String
  id: ID
  username: String
}

input UpdateOneTeacherInput {
  avatar: String
  email: String
  firstName: String
  lastName: String
  username: String
}
