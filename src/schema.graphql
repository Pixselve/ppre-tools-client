### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AcademicLevel {
  classrooms(after: String, before: String, first: Int, last: Int, skip: Int): [Classroom!]
  id: ID!
  name: String!
}

input AcademicLevelCreateInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  id: ID
  name: String!
}

input AcademicLevelCreateOneWithoutAcademicLevelInput {
  connect: AcademicLevelWhereUniqueInput
  create: AcademicLevelCreateWithoutClassroomsInput
}

input AcademicLevelCreateWithoutClassroomsInput {
  id: ID
  name: String!
}

input AcademicLevelWhereUniqueInput {
  id: ID
}

type AuthPayload {
  teacher: Teacher!
  token: String!
}

type Classroom {
  academicLevel: AcademicLevel!
  id: ID!
  school: School!
  schoolYears(after: String, before: String, first: Int, last: Int, skip: Int): [SchoolYear!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
}

input ClassroomCreateManyWithoutClassroomsInput {
  connect: [ClassroomWhereUniqueInput!]
  create: [ClassroomCreateWithoutSchoolInput!]
}

input ClassroomCreateOneWithoutClassroomInput {
  connect: ClassroomWhereUniqueInput
  create: ClassroomCreateWithoutTeachersInput
}

input ClassroomCreateWithoutSchoolInput {
  academicLevel: AcademicLevelCreateOneWithoutAcademicLevelInput!
  id: ID
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
}

input ClassroomCreateWithoutTeachersInput {
  academicLevel: AcademicLevelCreateOneWithoutAcademicLevelInput!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
}

input ClassroomWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Mutation {
  createOneAcademicLevel(data: AcademicLevelCreateInput!): AcademicLevel!
  createOneSchool(data: SchoolCreateInput!): School!
  createOneTeacher(firstName: String, lastName: String, password: String, role: Role, school: SchoolWhereUniqueInput, username: String): AuthPayload!
  login(password: String, teacher: TeacherWhereUniqueInput): AuthPayload!
}

type PPRE {
  checkups(after: String, before: String, first: Int, last: Int, skip: Int): [PPRECheckup!]
  createdAt: DateTime!
  globalAssessment: String
  id: ID!
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  schoolYear: SchoolYear!
  skills(after: String, before: String, first: Int, last: Int, skip: Int): [Skill!]
  updatedAt: DateTime!
}

type PPRECheckup {
  assessment: String!
  id: ID!
  phase: Int!
  ppre: PPRE!
  skillWorked: Skill!
}

input PPRECheckupCreateManyWithoutCheckupsInput {
  connect: [PPRECheckupWhereUniqueInput!]
  create: [PPRECheckupCreateWithoutPpreInput!]
}

input PPRECheckupCreateManyWithoutPpreCheckupInput {
  connect: [PPRECheckupWhereUniqueInput!]
  create: [PPRECheckupCreateWithoutSkillWorkedInput!]
}

input PPRECheckupCreateWithoutPpreInput {
  assessment: String!
  id: ID
  phase: Int!
  skillWorked: SkillCreateOneWithoutSkillWorkedInput!
}

input PPRECheckupCreateWithoutSkillWorkedInput {
  assessment: String!
  id: ID
  phase: Int!
  ppre: PPRECreateOneWithoutPpreInput!
}

input PPRECheckupWhereUniqueInput {
  id: ID
}

input PPRECreateManyWithoutPpreInput {
  connect: [PPREWhereUniqueInput!]
  create: [PPRECreateWithoutSkillsInput!]
}

input PPRECreateOneWithoutPpreInput {
  connect: PPREWhereUniqueInput
  create: PPRECreateWithoutSchoolYearInput
}

input PPRECreateWithoutSchoolYearInput {
  checkups: PPRECheckupCreateManyWithoutCheckupsInput
  globalAssessment: String
  id: ID
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  skills: SkillCreateManyWithoutSkillsInput
}

input PPRECreateWithoutSkillsInput {
  checkups: PPRECheckupCreateManyWithoutCheckupsInput
  globalAssessment: String
  id: ID
  nature: PPRENature!
  schoolAttendance: SchoolAttendance!
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
}

enum PPRENature {
  REMEDIATION
  SUPPORT
  UPGRADE
}

input PPREWhereUniqueInput {
  id: ID
}

type Query {
  findManyAcademicLevel(after: String, before: String, first: Int, last: Int, skip: Int): [AcademicLevel!]
  findManyTeacher(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
  findOneAcademicLevel(where: AcademicLevelWhereUniqueInput!): AcademicLevel
  findOneSchool(where: SchoolWhereUniqueInput!): School
}

enum Role {
  ADMIN
  DEFAULT
  MANAGER
}

type School {
  classrooms(after: String, before: String, first: Int, last: Int, skip: Int): [Classroom!]
  id: ID!
  name: String!
  phone: String!
  schoolYears(after: String, before: String, first: Int, last: Int, skip: Int): [SchoolYear!]
  teachers(after: String, before: String, first: Int, last: Int, skip: Int): [Teacher!]
  website: String
}

enum SchoolAttendance {
  ALWAYS
  FREQUENTDELAYS
  LONGABSENCES
  SHORTFREQUENTABSENCES
}

input SchoolCreateInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  id: ID
  name: String!
  phone: String!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  website: String
}

input SchoolCreateOneWithoutSchoolInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutClassroomsInput
}

input SchoolCreateWithoutClassroomsInput {
  id: ID
  name: String!
  phone: String!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  website: String
}

input SchoolWhereUniqueInput {
  id: ID
}

type SchoolYear {
  classroom: Classroom!
  id: ID!
  ppre: PPRE
  school: School!
  student: Student!
  year: DateTime!
}

input SchoolYearCreateManyWithoutSchoolYearsInput {
  connect: [SchoolYearWhereUniqueInput!]
  create: [SchoolYearCreateWithoutSchoolInput!]
}

input SchoolYearCreateOneWithoutSchoolYearInput {
  connect: SchoolYearWhereUniqueInput
  create: SchoolYearCreateWithoutPpreInput
}

input SchoolYearCreateWithoutPpreInput {
  classroom: ClassroomCreateOneWithoutClassroomInput!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  student: StudentCreateOneWithoutStudentInput!
  year: DateTime!
}

input SchoolYearCreateWithoutSchoolInput {
  classroom: ClassroomCreateOneWithoutClassroomInput!
  id: ID
  ppre: PPRECreateOneWithoutPpreInput
  student: StudentCreateOneWithoutStudentInput!
  year: DateTime!
}

input SchoolYearWhereUniqueInput {
  id: ID
}

type Skill {
  id: ID!
  name: String!
  parent: Skill
  ppre(after: String, before: String, first: Int, last: Int, skip: Int): [PPRE!]
  ppreCheckup(after: String, before: String, first: Int, last: Int, skip: Int): [PPRECheckup!]
  skill: Skill
}

input SkillCreateManyWithoutSkillsInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutPpreInput!]
}

input SkillCreateOneWithoutParentInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutSkillInput
}

input SkillCreateOneWithoutSkillInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutParentInput
}

input SkillCreateOneWithoutSkillWorkedInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutPpreCheckupInput
}

input SkillCreateWithoutParentInput {
  id: ID
  name: String!
  ppre: PPRECreateManyWithoutPpreInput
  ppreCheckup: PPRECheckupCreateManyWithoutPpreCheckupInput
  skill: SkillCreateOneWithoutSkillInput
}

input SkillCreateWithoutPpreCheckupInput {
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppre: PPRECreateManyWithoutPpreInput
  skill: SkillCreateOneWithoutSkillInput
}

input SkillCreateWithoutPpreInput {
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PPRECheckupCreateManyWithoutPpreCheckupInput
  skill: SkillCreateOneWithoutSkillInput
}

input SkillCreateWithoutSkillInput {
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppre: PPRECreateManyWithoutPpreInput
  ppreCheckup: PPRECheckupCreateManyWithoutPpreCheckupInput
}

input SkillWhereUniqueInput {
  id: ID
}

type Student {
  birthDate: DateTime!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  schoolYears(after: String, before: String, first: Int, last: Int, skip: Int): [SchoolYear!]
  username: String!
}

input StudentCreateOneWithoutStudentInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutSchoolYearsInput
}

input StudentCreateWithoutSchoolYearsInput {
  birthDate: DateTime!
  firstName: String!
  gender: Gender!
  id: ID
  lastName: String!
  password: String!
  username: String!
}

input StudentWhereUniqueInput {
  id: ID
  username: String
}

type Teacher {
  classroom: Classroom
  firstName: String!
  id: ID!
  lastName: String!
  role: Role!
  school: School!
  username: String!
}

input TeacherCreateManyWithoutTeachersInput {
  connect: [TeacherWhereUniqueInput!]
  create: [TeacherCreateWithoutSchoolInput!]
}

input TeacherCreateWithoutSchoolInput {
  classroom: ClassroomCreateOneWithoutClassroomInput
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  role: Role
  username: String!
}

input TeacherWhereUniqueInput {
  id: ID
  username: String
}
